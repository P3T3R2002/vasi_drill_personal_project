// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wells.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createWell = `-- name: CreateWell :one
INSERT INTO wells(id, created_at, updated_at, gps_long, gps_vert, price, cell_id, order_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5, 
    $6
)
RETURNING id, created_at, updated_at, gps_long, gps_vert, cell_id, price, order_id
`

type CreateWellParams struct {
	ID      uuid.UUID
	GpsLong float64
	GpsVert float64
	Price   int32
	CellID  uuid.UUID
	OrderID uuid.UUID
}

func (q *Queries) CreateWell(ctx context.Context, arg CreateWellParams) (Well, error) {
	row := q.db.QueryRowContext(ctx, createWell,
		arg.ID,
		arg.GpsLong,
		arg.GpsVert,
		arg.Price,
		arg.CellID,
		arg.OrderID,
	)
	var i Well
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GpsLong,
		&i.GpsVert,
		&i.CellID,
		&i.Price,
		&i.OrderID,
	)
	return i, err
}

const deleteWell = `-- name: DeleteWell :exec
DELETE FROM wells
WHERE id = $1
`

func (q *Queries) DeleteWell(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWell, id)
	return err
}

const deleteWells = `-- name: DeleteWells :exec
DELETE FROM wells
`

func (q *Queries) DeleteWells(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteWells)
	return err
}

const getWellDetails = `-- name: GetWellDetails :many
SELECT w.id, w.gps_long, w.gps_vert, g.expected_depth, w.price FROM wells w
INNER JOIN grid g ON g.id = w.cell_id
WHERE w.order_id = $1
`

type GetWellDetailsRow struct {
	ID            uuid.UUID
	GpsLong       float64
	GpsVert       float64
	ExpectedDepth int32
	Price         int32
}

func (q *Queries) GetWellDetails(ctx context.Context, orderID uuid.UUID) ([]GetWellDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getWellDetails, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWellDetailsRow
	for rows.Next() {
		var i GetWellDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.GpsLong,
			&i.GpsVert,
			&i.ExpectedDepth,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
