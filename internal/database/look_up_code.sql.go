// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: look_up_code.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCode = `-- name: CreateCode :one
INSERT INTO codes(code, created_at, updated_at, order_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2
)
RETURNING code, created_at, updated_at, order_id
`

type CreateCodeParams struct {
	Code    string
	OrderID uuid.UUID
}

func (q *Queries) CreateCode(ctx context.Context, arg CreateCodeParams) (Code, error) {
	row := q.db.QueryRowContext(ctx, createCode, arg.Code, arg.OrderID)
	var i Code
	err := row.Scan(
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderID,
	)
	return i, err
}

const deleteCode = `-- name: DeleteCode :exec
DELETE FROM codes
WHERE code = $1
`

func (q *Queries) DeleteCode(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteCode, code)
	return err
}

const deleteCodes = `-- name: DeleteCodes :exec
DELETE FROM codes
`

func (q *Queries) DeleteCodes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCodes)
	return err
}

const getCode = `-- name: GetCode :one
SELECT code, created_at, updated_at, order_id FROM codes
WHERE code = $1
`

func (q *Queries) GetCode(ctx context.Context, code string) (Code, error) {
	row := q.db.QueryRowContext(ctx, getCode, code)
	var i Code
	err := row.Scan(
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderID,
	)
	return i, err
}
