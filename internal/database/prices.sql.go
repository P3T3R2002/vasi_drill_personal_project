// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: prices.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPrice = `-- name: CreatePrice :one
INSERT INTO prices (id, created_at, updated_at, name, radious, price_per_meter)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name, radious, price_per_meter
`

type CreatePriceParams struct {
	ID            uuid.UUID
	Name          string
	Radious       int32
	PricePerMeter int32
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, createPrice,
		arg.ID,
		arg.Name,
		arg.Radious,
		arg.PricePerMeter,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Radious,
		&i.PricePerMeter,
	)
	return i, err
}

const deletePrices = `-- name: DeletePrices :exec
DELETE FROM users
`

func (q *Queries) DeletePrices(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deletePrices)
	return err
}

const getPriceByRadious = `-- name: GetPriceByRadious :one
SELECT id, created_at, updated_at, name, radious, price_per_meter FROM prices
WHERE radious = $1
`

func (q *Queries) GetPriceByRadious(ctx context.Context, radious int32) (Price, error) {
	row := q.db.QueryRowContext(ctx, getPriceByRadious, radious)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Radious,
		&i.PricePerMeter,
	)
	return i, err
}

const updatePrice = `-- name: UpdatePrice :one
UPDATE prices
SET updated_at = NOW(), price_per_meter = $2
WHERE id = $1
RETURNING id, created_at, updated_at, name, radious, price_per_meter
`

type UpdatePriceParams struct {
	ID            uuid.UUID
	PricePerMeter int32
}

func (q *Queries) UpdatePrice(ctx context.Context, arg UpdatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, updatePrice, arg.ID, arg.PricePerMeter)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Radious,
		&i.PricePerMeter,
	)
	return i, err
}
